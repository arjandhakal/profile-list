{"version":3,"sources":["components/spinner/spinner.component.jsx","utils/utils.js","assets/avatar.png","components/profile-photo/profile-photo.component.jsx","components/profile/profile.component.jsx","App.js","utils/useFetch.js","index.js"],"names":["Spinner","className","checkIndexChange","number","arrayLength","sourceIcons","google","linkedin","facebook","office365","twitter","ProfilePhoto","photos","useState","index","setIndex","failCounter","setFailCounter","loading","setLoading","useEffect","url","source","photosLength","length","nextPhoto","src","alt","onError","e","target","Avatar","onLoad","onClick","priorityArray","Profile","profiles","firstName","lastName","sortedPhotos","array","priorityListArray","priorityCategory","arrayToSort","priorityList","forEach","item","getPriorityListObject","sort","first","second","categoryOfFirst","categoryOfSecond","sortbyPriority","profilesLength","App","state","initialState","error","data","FETCH_START","FETCH_SUCCESS","FETCH_ERROR","useReducer","action","type","payload","dispatch","a","fetch","response","json","fetchData","useFetch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dc20f1b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './spinner.style.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"spinner-overlay\">\r\n            <div className=\"spinner-container\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner;","/*\r\n    A pure function to prevent out of bounds error while \r\n    shuffling through array elements. \r\n    Returns the index of first element when the number is greater than array length.\r\n    Returns the index of last element when the number is less than 0\r\n*/\r\nexport function checkIndexChange(number,arrayLength){\r\n    if (number > arrayLength - 1) return 0;\r\n    if (number < 0) return arrayLength - 1;\r\n    return number;\r\n}\r\n\r\n\r\n/*\r\n    a function that gets a priorit list array and changes\r\n    it to a object where [keys] are the priority names and values\r\n    are the [priority] with 0 being the highest priority.\r\n*/\r\nfunction getPriorityListObject(priorityListArray){\r\n    let priorityList = {};\r\n    //Adding Key and Value to the priority list from the array element and index\r\n    priorityListArray.forEach((item,index) => {\r\n        priorityList[item] = index + 1\r\n    })\r\n    return priorityList;\r\n}\r\n\r\n/* A pure function that sorts the array object based on a priority list Array and priority list \r\ncategory\r\n*/\r\nexport function sortbyPriority(array,priorityListArray,priorityCategory){\r\n    let arrayToSort =[...array]\r\n    //getting the priorit list object for comparision while sorting\r\n    let priorityList = getPriorityListObject(priorityListArray);\r\n\r\n    //sorting the array ascendingly based on the values of the priorityList\r\n    arrayToSort.sort((first,second) => {\r\n        //getting the category of the first element\r\n        let categoryOfFirst = first[priorityCategory];\r\n        //getting the category of the second element\r\n        let categoryOfSecond = second[priorityCategory];\r\n        //getting the priority value from the priority list and making the comparision\r\n        return priorityList[categoryOfFirst] - priorityList[categoryOfSecond]\r\n\r\n    })\r\n\r\n    return arrayToSort;\r\n    \r\n}","export default __webpack_public_path__ + \"static/media/avatar.28237e7f.png\";","import React,{useEffect, useState} from 'react';\r\nimport './profile-photo.styles.css';\r\n//importing icons\r\nimport {SiGoogle,SiLinkedin,SiFacebook,SiMicrosoftoffice,SiTwitter} from \"react-icons/si\";\r\n//importing default avatar\r\nimport Avatar from \"../../assets/avatar.png\";\r\n//Helper functions from util file\r\nimport {checkIndexChange} from '../../utils/utils';\r\nimport Spinner from '../spinner/spinner.component';\r\n\r\n\r\n//icons corresponding to the source of the photo\r\nconst sourceIcons = {\r\n    google : <SiGoogle/>,\r\n    linkedin : <SiLinkedin/>,\r\n    facebook : <SiFacebook/>,\r\n    office365 : <SiMicrosoftoffice/>,\r\n    twitter : <SiTwitter/>}\r\n\r\nconst ProfilePhoto = ({photos}) => {\r\n    //current index of photo being displayed\r\n    const [index,setIndex] = useState(0);\r\n    //counter to track if all the photos fail\r\n    const [failCounter,setFailCounter] = useState(0);\r\n    //state to track if fallback image is loading\r\n    const [loading,setLoading] = useState(false)\r\n\r\n    //resetting the index and fail counter to 0 whenever photos of a \r\n    //new profile are rendered\r\n    useEffect(() => {\r\n        setIndex(0)\r\n        setFailCounter(0)\r\n    },[photos])\r\n\r\n    //Failsafe in case index exceeds photos array while re rendering\r\n    if(!photos[index]) return <Spinner/>\r\n\r\n    //setting the url as image reference\r\n    const {url} = photos[index]\r\n    const {source} = photos[index] || 'Unknown'\r\n    //Saving the length of the photos array. \r\n    const photosLength = photos.length;\r\n\r\n    //Load the next photo\r\n    const nextPhoto = () => {\r\n        setIndex((index) => {\r\n            let newIndex = index + 1;\r\n            return checkIndexChange(newIndex,photosLength)            \r\n        })\r\n    }\r\n\r\n    //fallback function that sets a default image on image load error\r\n    const handleImageErrored = (e) => {\r\n        setLoading(true);\r\n        setFailCounter(failCounter + 1);\r\n        //failCounter equal to all the photos show default Avatar\r\n        if(failCounter === photosLength){\r\n            e.target.src = Avatar;\r\n            setLoading(false);\r\n            return\r\n        }\r\n        //if not increase the index and get the other priority photo\r\n        nextPhoto();        \r\n    }    \r\n\r\n    //function when image succesfully loaded\r\n    const handleImageLoaded = (e) => {\r\n        setLoading(false);\r\n        setFailCounter(0);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='photo-container'>\r\n                <div className=\"photo\">\r\n                    <img src={url} alt=\"profile user \" className=\"photo__img\" onError={handleImageErrored} onLoad={handleImageLoaded}/>\r\n                    </div>\r\n                    <span className=\"photo-source\"><em>Source: </em> {loading ? 'ðŸ˜µ' : sourceIcons[source] || 'ðŸ˜µ'}</span>\r\n                <button className=\"next-photo-btn\" onClick={nextPhoto}>Next Photo</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n//use of memo to prevent rerender when photos props hasn't changed.\r\nexport default ProfilePhoto;","import React,{useState} from 'react';\r\nimport './profile.styles.css';\r\n//importing the icons to be used\r\nimport { FaChevronLeft, FaChevronRight } from 'react-icons/fa';\r\n//Helper function from util file to prevent out of bounds while shuffling profile array.\r\n// and to sort the photos based on priority\r\nimport {checkIndexChange,sortbyPriority} from '../../utils/utils';\r\n//Profile photo component\r\nimport ProfilePhoto from \"../profile-photo/profile-photo.component\";\r\n\r\n//Priority rank of the photos to be displayed\r\nconst priorityArray =  [\"google\",\"linkedin\",\"facebook\",\"twitter\",\"office365\"]\r\n\r\nconst Profile = ({ profiles }) => {\r\n    //Current index of the profile being displayed\r\n    const [index,setIndex] = useState(0);\r\n\r\n    const {firstName, lastName, photos} = profiles[index];\r\n    //sorting the photos array based on priority\r\n    const sortedPhotos = sortbyPriority(photos,priorityArray,\"source\");\r\n\r\n    //Saving the length of the profile array. \r\n    const profilesLength = profiles.length;\r\n\r\n    const nextProfile = () => {\r\n        setIndex((index) => {\r\n            let newIndex = index + 1;\r\n            return checkIndexChange(newIndex,profilesLength)\r\n        })\r\n    }\r\n    \r\n    const prevProfile = () => {\r\n        setIndex((index) => {\r\n            let newIndex = index - 1;\r\n            return checkIndexChange(newIndex,profilesLength)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__photo\">\r\n                <ProfilePhoto photos={sortedPhotos} />\r\n            </div>\r\n            <div className=\"profile__info\">\r\n                    {`${firstName || ''} ${lastName || ''}`}\r\n            </div>\r\n            <div className='button-container'>\r\n                <button className=\"prev-btn\" onClick={prevProfile}>\r\n                    <FaChevronLeft/>\r\n                </button>\r\n                <button className=\"next-btn\" onClick={nextProfile}>\r\n                    <FaChevronRight/>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\n//Custom Hook that deals with API fetch calls\nimport useFetch from './utils/useFetch';\n// Loading Spinner\nimport Spinner from './components/spinner/spinner.component';\n//Profile Component to display list of user information\nimport Profile from './components/profile/profile.component';\n\n//URL FOR THE LIST OF PHOTOS\nconst url=\"https://gist.githubusercontent.com/roxcity/300697399059a6f54a983d1e9af5f459/raw/d81a2c42f8de6ca439f3cd3a5b0e809fd34f31bc/users.json\"\n\nfunction App() {\n  //calling the fetch hook and saving the returned values\n  const { state } = useFetch(url);\n  const {loading,error,data: profiles} = state;\n\n  //handling error and loading situations\n  if(error) return <main>Oops</main>\n  if(loading) return <main><Spinner/></main>\n\n\n  return (\n    <main>\n      <section className='container'>\n        <div className=\"title\">\n          <h2>User Profiles</h2>\n        <div className=\"underline\"/>\n        </div>\n        <Profile profiles={profiles}/>\n      </section>\n    </main>\n  )\n}\n\nexport default App;\n","import {\r\n    useEffect,\r\n    useReducer\r\n} from 'react';\r\n\r\n/*\r\n    A custom hook to make the API calls to fetch data.\r\n    It return the loading state, error state and the fetched data.\r\n*/\r\nexport default function useFetch(url) {   \r\n\r\n    const initialState = {\r\n        loading: true,\r\n        error: null,\r\n        data: []\r\n    }\r\n\r\n    //assiging action name to constants to reduce errors.\r\n    const FETCH_START = 'FETCH_START';\r\n    const FETCH_SUCCESS = 'FETCH_SUCCESS';\r\n    const FETCH_ERROR = 'FETCH_ERROR';\r\n\r\n    //creating reducer to update the state on different actions\r\n    const [state,dispatch] = useReducer((state,action) => {\r\n        switch(action.type){\r\n            case FETCH_START:\r\n                return {...initialState, loading: true, error:null};\r\n            case FETCH_SUCCESS:\r\n                return {...initialState, loading: false, data:action.payload, error:null};\r\n            case FETCH_ERROR:\r\n                return {...initialState, loading: false, error: action.payload};\r\n            default:\r\n                return state;\r\n\r\n        }\r\n    }, initialState);\r\n\r\n    useEffect(() => {\r\n        //fetching data\r\n        const fetchData = async () => {\r\n            dispatch({type:FETCH_START})\r\n            try{\r\n                const response = await fetch(url);\r\n                const data = await response.json();\r\n                //updating the state with the fetched data\r\n                dispatch({type:FETCH_SUCCESS,payload:data});\r\n            }catch(error){\r\n                //updating the state with the error\r\n                dispatch({type:FETCH_ERROR,payload:error});\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n\r\n    }, [url])\r\n\r\n    return {\r\n        state\r\n    }\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}